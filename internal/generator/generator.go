package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"strings"

	"github.com/emicklei/proto"
)

type Generator struct {
	def *proto.Proto

	buf bytes.Buffer

	version   int
	gopackage string
	messages  map[string]*Message
}

func New(def *proto.Proto) *Generator {
	g := &Generator{
		def:      def,
		version:  2,
		messages: make(map[string]*Message),
	}
	g.parse()
	return g
}

func (g *Generator) P(args ...interface{}) { _, _ = fmt.Fprint(&g.buf, args...) }

func (g *Generator) Pln(args ...interface{}) { _, _ = fmt.Fprintln(&g.buf, args...) }

func (g *Generator) Pf(format string, args ...interface{}) {
	_, _ = fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) Generate(out io.Writer) {
	g.generate()

	source, err := format.Source(g.buf.Bytes())
	if err != nil {
		fmt.Printf("%s", g.buf.Bytes())
		panic(err)
	}
	_, err = out.Write(source)
	if err != nil {
		panic(err)
	}
}

func (g *Generator) parse() {
	for _, elem := range g.def.Elements {
		switch elem := elem.(type) {
		case *proto.Syntax:
			switch elem.Value {
			case "proto3":
				g.version = 3
			case "proto2":
				g.version = 2
			default:
				panic("unsupported syntax")
			}
		case *proto.Option:
			if elem.Name == "go_package" {
				p := elem.Constant.Source
				g.gopackage = strings.TrimPrefix(p, "./;")
			}
		case *proto.Message:
			g.message(elem)
		}
	}
}

func (g *Generator) lookup(name string) *Message {
	m, ok := g.messages[name]
	if !ok {
		m = &Message{Name: name}
		g.messages[name] = m
	}
	return m
}

func (g *Generator) message(m *proto.Message) {
	msg := g.lookup(m.Name)
	for _, field := range m.Elements {
		switch field := field.(type) {
		case *proto.NormalField:
			f := &Field{
				Name:     field.Name,
				Sequence: field.Sequence,
				Type:     g.typ(field.Type),
			}
			msg.Fields = append(msg.Fields, f)
		case *proto.Message:
			panic("nested message not implemented")
		}
	}
}
func (g *Generator) generate() {
	g.Pln("// Code generated by yaprotoc. DO NOT EDIT.")
	g.Pln()
	g.Pln("package ", g.gopackage)
	g.Pln()

	// todo(wdvxdr): generate imports
	// g.Pln("import (")
	// g.Pln("\"fmt\"")
	// g.Pln(")")

	g.Pln()

	for _, m := range g.messages {
		g.Pln("type ", GoCamelCase(m.Name), " struct {")
		for _, f := range m.Fields {
			g.Pf("%s %s `protobuf:\"%d\"`\n", GoCamelCase(f.Name), f.Type.GoType(), f.Sequence)
		}
		g.Pln("}")
		g.Pln()
	}

}
